import { Command } from "commander";
import { execSync } from "child_process";
import * as path from "path";
import * as fs from "fs";

function run(cmd: string, opts = {}) {
  execSync(cmd, { stdio: "inherit", ...opts });
}

function capitalize(str: string) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

const program = new Command();
program
  .name("new-service")
  .description("Scaffold a new Go microservice with boilerplate and automation")
  .argument("<service-name>", "Name of the service")
  .argument("<module-name>", "Name of the main module")
  .parse();

const [serviceName, moduleName] = program.args;
const moduleNameUpper = capitalize(moduleName);
const cwd = process.cwd();
const serviceDir = path.join(cwd, serviceName);
fs.mkdirSync(serviceDir);
process.chdir(serviceDir);
fs.mkdirSync("cmd");
fs.mkdirSync("internal/config", { recursive: true });
fs.mkdirSync("diagrams");

// .env
fs.writeFileSync(
  ".env",
  `# Database configuration\nDB_HOST=localhost\nDB_USER=postgres\nDB_PASSWORD=postgres\nDB_NAME=${serviceName}\nDB_PORT=\"5432\"\n`
);

// config.go
fs.writeFileSync(
  "internal/config/config.go",
  `package config\n\nimport (\n\t\"fmt\"\n\t\"os\"\n\t\"github.com/joho/godotenv\"\n)\n\ntype DBConfig struct {\n\tHost, User, Password, Name string\n\tPort                       string\n}\n\ntype AppConfig struct {\n\tPort string\n\tDB   DBConfig\n}\n\nfunc Load() AppConfig {\n\t_ = godotenv.Load()\n\tport := os.Getenv(\"APP_PORT\")\n\tif port == \"\" {\n\t\tport = \"8080\"\n\t}\n\tdb := DBConfig{\n\t\tHost:     getenv(\"DB_HOST\", \"localhost\"),\n\t\tUser:     getenv(\"DB_USER\", \"postgres\"),\n\t\tPassword: getenv(\"DB_PASSWORD\", \"postgres\"),\n\t\tName:     getenv(\"DB_NAME\", \"products\"),\n\t\tPort:     getenv(\"DB_PORT\", \"5432\"),\n\t}\n\treturn AppConfig{Port: port, DB: db}\n}\n\nfunc (d DBConfig) DSN() string {\n\treturn fmt.Sprintf(\n\t\t\"host=%s user=%s password=%s dbname=%s port=%s sslmode=disable TimeZone=UTC\",\n\t\td.Host, d.User, d.Password, d.Name, d.Port,\n\t)\n}\n\nfunc getenv(k, def string) string {\n\tif v := os.Getenv(k); v != \"\" {\n\t\treturn v\n\t}\n\treturn def\n}\n`
);

// go.mod and dependencies
run(`go mod init ${serviceName}`);
run("go get github.com/gin-gonic/gin");
run("go get github.com/swaggo/gin-swagger");
run("go get github.com/swaggo/files");
run("go get gorm.io/gorm");
run("go get gorm.io/driver/postgres");

// Install swag CLI if not present
try {
  run("swag --version", { stdio: "ignore" });
} catch {
  run("go install github.com/swaggo/swag/cmd/swag@latest");
}
process.env.PATH = `${process.env.GOPATH || ""}/bin:${process.env.PATH}`;

// main.go
fs.writeFileSync(
  "cmd/main.go",
  `package main\n\nimport (\n    \"log\"\n    \"${serviceName}/internal/config\"\n    \"${serviceName}/internal/${moduleName}\"\n    \"github.com/gin-gonic/gin\"\n    ginSwagger \"github.com/swaggo/gin-swagger\"\n    swaggerFiles \"github.com/swaggo/files\"\n    _ \"${serviceName}/docs/swagger\" // docs is generated by Swag CLI, you have to import it.\n    \"gorm.io/driver/postgres\"\n    \"gorm.io/gorm\"\n)\n\n// @title        ${serviceName} API\n// @version      1.0\n// @description  This is a sample server for ${serviceName}.\n// @host         localhost:8080\n// @BasePath     /\nfunc main() {\n    config := config.Load()\n    db, err := gorm.Open(postgres.Open(config.DB.DSN()), &gorm.Config{})\n    if err != nil {\n        log.Fatalf(\"failed to connect db: %v\", err)\n    }\n    // Auto-migrate on startup (dev only)\n    if err := db.AutoMigrate(&${moduleName}.${moduleNameUpper}{}); err != nil {\n        log.Fatalf(\"migrate: %v\", err)\n    }\n    router := gin.Default()\n    router.GET(\"/ping\", func(c *gin.Context) {\n        c.JSON(200, gin.H{\"message\": \"pong\"})\n    })\n    // Swagger endpoint\n    router.GET(\"/swagger/*any\", ginSwagger.WrapHandler(swaggerFiles.Handler))\n    // USE THIS COMMENT TO AUTO-GENERATE NEW MODULES\n    log.Printf(\"üå± listening on :8080\")\n    if err := router.Run(\":8080\"); err != nil {\n        log.Fatalf(\"server: %v\", err)\n    }\n}\n`
);

// Copy new-module scripts
fs.mkdirSync("scripts", { recursive: true });
run("cp -R ../scripts/new-module scripts/");
run("cp -R ../scripts/new-module.sh ./");

// Git
run("git init");

// Swagger docs
try {
  run("swag init -g ./cmd/main.go -o ./docs/swagger");
} catch {
  console.warn(
    "‚ö†Ô∏è  swag CLI not found or failed, please ensure it's installed and in your PATH."
  );
}

// Create DB (local or Docker)
try {
  run(`createdb ${serviceName}`);
} catch {
  // Try Docker
  try {
    const container = execSync(
      "docker ps --filter ancestor=postgres --format '{{.ID}}' | head -n 1"
    )
      .toString()
      .trim();
    if (!container) {
      console.error(
        "Error: No running postgres Docker container found. Please start your postgres container."
      );
    } else {
      try {
        execSync(
          `docker exec -u postgres ${container} psql -tc \"SELECT 1 FROM pg_database WHERE datname = '${serviceName}'\" | grep -q 1 || docker exec -u postgres ${container} createdb ${serviceName}`
        );
      } catch {}
    }
  } catch {}
}

// Open in VSCode and run module script
run("go mod tidy");
run(`sh ./new-module.sh ${moduleName}`);
run("code .");
